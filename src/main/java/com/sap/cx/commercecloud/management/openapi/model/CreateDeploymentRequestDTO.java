/*
 * SAP Commerce Cloud - Management API
 * The API to manage your SAP Commerce environments in the cloud, including provisioning, building releases, deploying, operating and more.
 *
 * OpenAPI spec version: 2.0.11
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sap.cx.commercecloud.management.openapi.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.Objects;

/**
 * Entity to be used to start a new deployment
 */
@Schema(description = "Entity to be used to start a new deployment")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-30T21:55:47.726988+02:00[Europe/Rome]")

public class CreateDeploymentRequestDTO {
    @SerializedName("buildCode")
    private String buildCode = null;

    @SerializedName("environmentCode")
    private String environmentCode = null;
    @SerializedName("databaseUpdateMode")
    private DatabaseUpdateModeEnum databaseUpdateMode = null;
    @SerializedName("strategy")
    private StrategyEnum strategy = null;

    public CreateDeploymentRequestDTO buildCode(String buildCode) {
        this.buildCode = buildCode;
        return this;
    }

    /**
     * Code of the build to be deployed
     *
     * @return buildCode
     **/
    @Schema(required = true, description = "Code of the build to be deployed")
    public String getBuildCode() {
        return buildCode;
    }

    public void setBuildCode(String buildCode) {
        this.buildCode = buildCode;
    }

    public CreateDeploymentRequestDTO environmentCode(String environmentCode) {
        this.environmentCode = environmentCode;
        return this;
    }

    /**
     * Code of the environment where the build will be deployed to
     *
     * @return environmentCode
     **/
    @Schema(required = true, description = "Code of the environment where the build will be deployed to")
    public String getEnvironmentCode() {
        return environmentCode;
    }

    public void setEnvironmentCode(String environmentCode) {
        this.environmentCode = environmentCode;
    }

    public CreateDeploymentRequestDTO databaseUpdateMode(DatabaseUpdateModeEnum databaseUpdateMode) {
        this.databaseUpdateMode = databaseUpdateMode;
        return this;
    }

    /**
     * Database action used in the deployment
     *
     * @return databaseUpdateMode
     **/
    @Schema(required = true, description = "Database action used in the deployment")
    public DatabaseUpdateModeEnum getDatabaseUpdateMode() {
        return databaseUpdateMode;
    }

    public void setDatabaseUpdateMode(DatabaseUpdateModeEnum databaseUpdateMode) {
        this.databaseUpdateMode = databaseUpdateMode;
    }

    public CreateDeploymentRequestDTO strategy(StrategyEnum strategy) {
        this.strategy = strategy;
        return this;
    }

    /**
     * Strategy for the deployment. Could be rolling-update or re-create
     *
     * @return strategy
     **/
    @Schema(required = true, description = "Strategy for the deployment. Could be rolling-update or re-create")
    public StrategyEnum getStrategy() {
        return strategy;
    }

    public void setStrategy(StrategyEnum strategy) {
        this.strategy = strategy;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDeploymentRequestDTO createDeploymentRequestDTO = (CreateDeploymentRequestDTO) o;
        return Objects.equals(this.buildCode, createDeploymentRequestDTO.buildCode) && Objects.equals(this.environmentCode, createDeploymentRequestDTO.environmentCode) && Objects.equals(this.databaseUpdateMode, createDeploymentRequestDTO.databaseUpdateMode) && Objects.equals(this.strategy, createDeploymentRequestDTO.strategy);
    }

    @Override
    public int hashCode() {
        return Objects.hash(buildCode, environmentCode, databaseUpdateMode, strategy);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CreateDeploymentRequestDTO {\n");

        sb.append("    buildCode: ").append(toIndentedString(buildCode)).append("\n");
        sb.append("    environmentCode: ").append(toIndentedString(environmentCode)).append("\n");
        sb.append("    databaseUpdateMode: ").append(toIndentedString(databaseUpdateMode)).append("\n");
        sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }


    /**
     * Database action used in the deployment
     */
    @JsonAdapter(DatabaseUpdateModeEnum.Adapter.class)
    public enum DatabaseUpdateModeEnum {
        @SerializedName("NONE") NONE("NONE"), @SerializedName("UPDATE") UPDATE("UPDATE"), @SerializedName("INITIALIZE") INITIALIZE("INITIALIZE");

        private String value;

        DatabaseUpdateModeEnum(String value) {
            this.value = value;
        }

        public static DatabaseUpdateModeEnum fromValue(String input) {
            for (DatabaseUpdateModeEnum b : DatabaseUpdateModeEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<DatabaseUpdateModeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final DatabaseUpdateModeEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public DatabaseUpdateModeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return DatabaseUpdateModeEnum.fromValue((String) (value));
            }
        }
    }

    /**
     * Strategy for the deployment. Could be rolling-update or re-create
     */
    @JsonAdapter(StrategyEnum.Adapter.class)
    public enum StrategyEnum {
        @SerializedName("ROLLING_UPDATE") ROLLING_UPDATE("ROLLING_UPDATE"), @SerializedName("RECREATE") RECREATE("RECREATE"), @SerializedName("GREEN") GREEN("GREEN");

        private String value;

        StrategyEnum(String value) {
            this.value = value;
        }

        public static StrategyEnum fromValue(String input) {
            for (StrategyEnum b : StrategyEnum.values()) {
                if (b.value.equals(input)) {
                    return b;
                }
            }
            return null;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static class Adapter extends TypeAdapter<StrategyEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StrategyEnum enumeration) throws IOException {
                jsonWriter.value(String.valueOf(enumeration.getValue()));
            }

            @Override
            public StrategyEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return StrategyEnum.fromValue((String) (value));
            }
        }
    }

}
